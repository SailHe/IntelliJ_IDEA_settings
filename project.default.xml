<application>
  <component name="ProjectManager">
    <defaultProject>
      <component name="CheckStyle-IDEA">
        <option name="configuration">
          <map>
            <entry key="checkstyle-version" value="8.1" />
            <entry key="location-0" value="BUNDLED:(bundled):Sun Checks" />
            <entry key="location-1" value="BUNDLED:(bundled):Google Checks" />
            <entry key="scan-before-checkin" value="false" />
            <entry key="scanscope" value="JavaOnly" />
            <entry key="suppress-errors" value="false" />
          </map>
        </option>
      </component>
      <component name="CheckStyle-IDEA-workspace">
        <option name="configuration">
          <map>
            <entry key="last-active-plugin-version" value="5.22.0" />
          </map>
        </option>
      </component>
      <component name="JUnitGeneratorProjectSettings">
        <option name="outputFilePattern" value="${SOURCEPATH}/../../test/java/${PACKAGE}/${FILENAME}" />
        <option name="vmTemplates">
          <map>
            <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
            <entry key="JUnit 4" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package $entry.packageName; &#10;&#10;import org.junit.Test; &#10;import org.junit.Before; &#10;import org.junit.After; &#10;&#10;/** &#10; * ${entry.className} Tester. &#10; * &#10; * @author &lt;HF-tester&gt; &#10; * @version 1.0&#10; * @since &lt;pre&gt;$today&lt;/pre&gt;  &#10; */ &#10;public class $testClass { &#10;&#10;    @Before&#10;    public void before() throws Exception { &#10;    } &#10;    &#10;    @After&#10;    public void after() throws Exception { &#10;    } &#10;    &#10;    #foreach($method in $entry.methodList) &#10;  /** &#10;    * Method: $method.signature &#10;    */ &#10;    @Test&#10;    public void test#cap(${method.name})() throws Exception { &#10;    //TODO: Test goes here... &#10;    } &#10;    &#10;    #end &#10;    &#10;    #foreach($method in $entry.privateMethodList) &#10;  /** &#10;    * Method: $method.signature &#10;    */ &#10;    @Test&#10;    public void test#cap(${method.name})() throws Exception { &#10;    //TODO: Test goes here... &#10;    #foreach($string in $method.reflectionCode) &#10;    $string &#10;    #end &#10;    } &#10;&#10;#end &#10;} &#10;#end" />
          </map>
        </option>
      </component>
      <component name="MavenImportPreferences">
        <option name="generalSettings">
          <MavenGeneralSettings>
            <option name="mavenHome" value="E:/Program Files Project/Maven/apache-maven-3.5.2" />
            <option name="userSettingsFile" value="E:\Repository\settings.xml" />
          </MavenGeneralSettings>
        </option>
      </component>
      <component name="PropertiesComponent">
        <property name="last_opened_file_path" value="E:/Projects/Demo" />
        <property name="node.js.path.for.package.eslint" value="project" />
        <property name="node.js.path.for.package.standard" value="project" />
        <property name="node.js.selected.package.eslint" value="E:\nodejs\global_node_modules\node_modules\eslint" />
        <property name="node.js.selected.package.standard" value="" />
        <property name="nodejs_interpreter_path.stuck_in_default_project" value="E:/nodejs/node" />
        <property name="nodejs_npm_path_reset_for_default_project" value="true" />
        <property name="project.structure.last.edited" value="Libraries" />
        <property name="project.structure.proportion" value="0.0" />
        <property name="project.structure.side.proportion" value="0.0" />
        <property name="settings.editor.selected.configurable" value="settings.javascript.linters.eslint" />
      </component>
      <component name="RunManager">
        <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
          <module name="" />
          <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
          <option name="PROGRAM_PARAMETERS" />
          <predefined_log_file id="idea.log" enabled="true" />
          <method />
        </configuration>
        <configuration default="true" type="JUnit" factoryName="JUnit">
          <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
          <module name="" />
          <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
          <option name="ALTERNATIVE_JRE_PATH" />
          <option name="PACKAGE_NAME" />
          <option name="MAIN_CLASS_NAME" />
          <option name="METHOD_NAME" />
          <option name="TEST_OBJECT" value="class" />
          <option name="VM_PARAMETERS" value="-ea" />
          <option name="PARAMETERS" />
          <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
          <option name="ENV_VARIABLES" />
          <option name="PASS_PARENT_ENVS" value="true" />
          <option name="TEST_SEARCH_SCOPE">
            <value defaultName="singleModule" />
          </option>
          <envs />
          <patterns />
          <method />
        </configuration>
        <configuration default="true" type="TestNG" factoryName="TestNG">
          <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
          <module name="" />
          <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
          <option name="ALTERNATIVE_JRE_PATH" />
          <option name="SUITE_NAME" />
          <option name="PACKAGE_NAME" />
          <option name="MAIN_CLASS_NAME" />
          <option name="METHOD_NAME" />
          <option name="GROUP_NAME" />
          <option name="TEST_OBJECT" value="CLASS" />
          <option name="VM_PARAMETERS" value="-ea" />
          <option name="PARAMETERS" />
          <option name="WORKING_DIRECTORY" value="$MODULE_DIR$" />
          <option name="OUTPUT_DIRECTORY" />
          <option name="ANNOTATION_TYPE" />
          <option name="ENV_VARIABLES" />
          <option name="PASS_PARENT_ENVS" value="true" />
          <option name="TEST_SEARCH_SCOPE">
            <value defaultName="singleModule" />
          </option>
          <option name="USE_DEFAULT_REPORTERS" value="false" />
          <option name="PROPERTIES_FILE" />
          <envs />
          <properties />
          <listeners />
          <method />
        </configuration>
        <configuration default="true" type="Applet" factoryName="Applet">
          <option name="WIDTH" value="400" />
          <option name="HEIGHT" value="300" />
          <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
          <module />
          <method />
        </configuration>
        <configuration default="true" type="Application" factoryName="Application">
          <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
          <option name="MAIN_CLASS_NAME" />
          <option name="VM_PARAMETERS" />
          <option name="PROGRAM_PARAMETERS" />
          <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
          <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
          <option name="ALTERNATIVE_JRE_PATH" />
          <option name="ENABLE_SWING_INSPECTOR" value="false" />
          <option name="ENV_VARIABLES" />
          <option name="PASS_PARENT_ENVS" value="true" />
          <module name="" />
          <envs />
          <method />
        </configuration>
        <configuration default="true" type="Remote" factoryName="Remote">
          <option name="USE_SOCKET_TRANSPORT" value="true" />
          <option name="SERVER_MODE" value="false" />
          <option name="SHMEM_ADDRESS" value="javadebug" />
          <option name="HOST" value="localhost" />
          <option name="PORT" value="5005" />
          <method />
        </configuration>
      </component>
      <component name="masterDetails">
        <states>
          <state key="GlobalLibrariesConfigurable.UI">
            <settings>
              <last-edited>MyGlobalLib(目前添加的是东阳保安的本地库)</last-edited>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
          <state key="JdkListConfigurable.UI">
            <settings>
              <last-edited>1.8</last-edited>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
          <state key="ProjectJDKs.UI">
            <settings>
              <last-edited>1.8</last-edited>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
          <state key="ProjectLibrariesConfigurable.UI">
            <settings>
              <splitter-proportions>
                <option name="proportions">
                  <list>
                    <option value="0.2" />
                  </list>
                </option>
              </splitter-proportions>
            </settings>
          </state>
        </states>
      </component>
    </defaultProject>
  </component>
</application>